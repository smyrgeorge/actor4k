package io.github.smyrgeorge.actor4k.actor.impl

import io.github.smyrgeorge.actor4k.actor.Actor
import io.github.smyrgeorge.actor4k.actor.ActorProtocol
import io.github.smyrgeorge.actor4k.actor.Behavior
import io.github.smyrgeorge.actor4k.system.ActorSystem

/**
 * An abstract actor class that enables dynamic behavior changes for handling incoming requests.
 *
 * This class extends the [Actor] class and introduces a dynamic behavior mechanism
 * for processing requests. It allows defining and changing the behavior of the actor
 * at runtime through the `become` method.
 *
 * @param Req The type of the request messages this actor can process. Must implement [ActorProtocol].
 * @param Res The type of the response messages this actor can produce. Must implement [ActorProtocol.Response].
 * @param key A unique identifier for the actor instance.
 * @param capacity The capacity of the actor's queue. Defaults to the value specified in `ActorSystem.conf.actorQueueSize`.
 * @param stashCapacity Indicates the actor's stash capacity.
 */
abstract class BehaviorActor<Req, Res>(
    key: String,
    capacity: Int = ActorSystem.conf.actorMailboxSize,
    stashCapacity: Int = ActorSystem.conf.actorStashSize,
) : Actor<Req, Res>(key, capacity, stashCapacity) where  Req : ActorProtocol, Res : ActorProtocol.Response {

    private var behavior: suspend (BehaviorActor<Req, Res>, Req) -> Behavior<Res> = { _, _ ->
        error("[${address()}] No behavior set. Did you forget to call `become` function?")
    }

    /**
     * Processes an incoming request using the actor's current behavior function.
     *
     * This method delegates the handling of the received message `m` to the
     * actor's current behavior, which is dynamically set by the `become` method.
     *
     * @param m The incoming request of type [Req] to be processed by the actor's behavior.
     * @return The response of type [Res] generated by applying the current behavior function to the given request.
     */
    final override suspend fun onReceive(m: Req): Behavior<Res> = behavior(this, m)

    /**
     * Dynamically updates the behavior of the actor for processing incoming messages.
     *
     * This method allows the actor to change its behavior to a new one defined
     * by the provided suspending function. The new behavior function is applied
     * to process future requests.
     *
     * @param A The type of the `BehaviorActor` subclass using this new behavior.
     * @param newBehavior A suspending function that defines the new behavior.
     *                     It takes the actor instance of type [A] and a request
     *                     of type [Req] as parameters and produces a response of
     *                     type [Res].
     */
    protected fun <A : BehaviorActor<Req, Res>> become(newBehavior: suspend (A, Req) -> Behavior<Res>) {
        @Suppress("UNCHECKED_CAST")
        behavior = newBehavior as suspend (BehaviorActor<Req, Res>, Req) -> Behavior<Res>
    }
}
