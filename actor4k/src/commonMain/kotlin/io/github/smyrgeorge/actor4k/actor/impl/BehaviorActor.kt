package io.github.smyrgeorge.actor4k.actor.impl

import io.github.smyrgeorge.actor4k.actor.Actor
import io.github.smyrgeorge.actor4k.actor.ActorProtocol

/**
 * An abstract actor that supports dynamic behaviors for processing messages.
 *
 * The `BehaviorActor` is a specialized actor that allows its behavior
 * for processing incoming messages to be dynamically changed at runtime.
 * The behavior is defined as a suspending function that processes a request
 * and generates a corresponding response.
 *
 * @param Req The type of request messages this actor processes. It must
 *            implement [ActorProtocol].
 * @param Res The type of response messages this actor produces. It must
 *            implement [ActorProtocol.Response].
 * @param key A unique identifier for this actor instance.
 * @param behavior The initial behavior function to process incoming messages.
 *                 By default, this function generates an error if not overridden.
 */
abstract class BehaviorActor<Req, Res>(
    key: String,
    private var behavior: suspend (BehaviorActor<Req, Res>, Req) -> Res =
        { _, _ -> error("No behavior set.") }
) : Actor<Req, Res>(key)
        where  Req : ActorProtocol, Res : ActorProtocol.Response {

    /**
     * Processes an incoming request using the actor's current behavior function.
     *
     * This method delegates the handling of the received message `m` to the
     * actor's current behavior, which is dynamically set by the `become` method.
     *
     * @param m The incoming request of type [Req] to be processed by the actor's behavior.
     * @return The response of type [Res] generated by applying the current behavior function to the given request.
     */
    final override suspend fun onReceive(m: Req): Res = behavior(this, m)

    /**
     * Dynamically updates the behavior of the actor for processing incoming messages.
     *
     * This method allows the actor to change its behavior to a new one defined
     * by the provided suspending function. The new behavior function is applied
     * to process future requests.
     *
     * @param A The type of the `BehaviorActor` subclass using this new behavior.
     * @param newBehavior A suspending function that defines the new behavior.
     *                     It takes the actor instance of type [A] and a request
     *                     of type [Req] as parameters and produces a response of
     *                     type [Res].
     */
    protected fun <A : BehaviorActor<Req, Res>> become(newBehavior: suspend (A, Req) -> Res) {
        @Suppress("UNCHECKED_CAST")
        behavior = newBehavior as suspend (BehaviorActor<Req, Res>, Req) -> Res
    }
}
